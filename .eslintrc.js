module.exports = {
  root: true,
  parser: 'vue-eslint-parser',
  parserOptions: {
    parser: '@typescript-eslint/parser',
    ecmaFeatures: {
      jsx: true,
    },
    project: './tsconfig.json',
    extraFileExtensions: ['.vue'],
    warnOnUnsupportedTypeScriptVersion: true,
  },
  extends: [
    'airbnb-base',
    'airbnb-typescript/base',
    'plugin:eslint-comments/recommended',
    'plugin:you-dont-need-lodash-underscore/compatible',
    'plugin:regexp/recommended',
    'plugin:unicorn/recommended',
    'plugin:vuejs-accessibility/recommended',
    'plugin:vue/recommended',
    'plugin:prettier/recommended',
  ],
  env: {
    browser: true,
    commonjs: true,
    es2021: true,
    jasmine: true,
    jest: true,
    mocha: true,
    node: true,
    shelljs: true,
    mongo: true,
  },
  globals: {
    dd: 'readonly',
    jd: 'readonly',
    ks: 'readonly',
    my: 'readonly',
    plus: 'readonly',
    qh: 'readonly',
    qq: 'readonly',
    swan: 'readonly',
    tt: 'readonly',
    uni: 'readonly',
    weex: 'readonly',
    wx: 'readonly',
  },
  rules: {
    'class-methods-use-this': 'off',
    'import/order': [
      'error',
      {
        groups: ['builtin', 'external', 'internal', 'parent', 'sibling', 'index', 'object', 'type'],
        pathGroups: [
          {
            pattern: '@/**',
            group: 'internal',
          },
          {
            pattern: '@@/**',
            group: 'internal',
          },
          {
            pattern: '~/**',
            group: 'internal',
          },
          {
            pattern: '~~/**',
            group: 'internal',
          },
        ],
      },
    ],
    'import/prefer-default-export': 'off',
    'import/no-extraneous-dependencies': [
      'error',
      {
        devDependencies: [
          '**/conf/**',
          '**/config/**',
          '**/configs/**',
          '**/mock/**',
          '**/mocks/**',
          '**/test/**',
          '**/tests/**',
          '**/spec/**',
          '**/__mock__/**',
          '**/__mocks__/**',
          '**/__test__/**',
          '**/__tests__/**',
          '**/*.{conf,config,configs,setup}.{js,cjs,mjs,jsx,ts,cts,mts,tsx,vue,svelte}',
          '**/*.{conf,config,configs,setup}.*.{js,cjs,mjs,jsx,ts,cts,mts,tsx,vue,svelte}',
          '**/test.{js,cjs,mjs,jsx,ts,cts,mts,tsx,vue,svelte}',
          '**/test-*.{js,cjs,mjs,jsx,ts,cts,mts,tsx,vue,svelte}',
          '**/*{.,_}{test,spec}.{js,cjs,mjs,jsx,ts,cts,mts,tsx,vue,svelte}',
          '**/.*rc*',
          '**/gulpfile.{js,cjs,mjs,ts,cts,mts}',
          '**/gulpfile.*.{js,cjs,mjs,ts,cts,mts}',
        ],
        optionalDependencies: false,
      },
    ],
    'no-console': 'warn',
    'no-debugger': 'warn',
    'no-param-reassign': [
      'error',
      {
        props: true,
        ignorePropertyModificationsFor: [
          'acc',
          'accumulator',
          'app',
          'application',
          'arg',
          'args',
          'argument',
          'arguments',
          'conf',
          'config',
          'configs',
          'configuration',
          'configurations',
          'ctx',
          'context',
          'e',
          'err',
          'error',
          'event',
          'info',
          'information',
          'inst',
          'instance',
          'r',
          'req',
          'request',
          'res',
          'result',
          'response',
          'state',
        ],
        ignorePropertyModificationsForRegex: ['^(d|D)raft', '(d|D)raft$'], // immer
      },
    ],
    'no-template-curly-in-string': 'off',
    'no-underscore-dangle': 'off', // mongodb
    'unicorn/filename-case': 'off',
    'unicorn/no-array-for-each': 'off',
    'unicorn/no-array-reduce': 'off',
    'unicorn/no-null': 'off',
    'unicorn/no-process-exit': 'off',
    'unicorn/numeric-separators-style': 'off',
    'unicorn/prefer-module': 'off',
    'unicorn/prefer-node-protocol': 'off',
    'unicorn/prefer-object-from-entries': 'off',
    'unicorn/prevent-abbreviations': [
      'warn',
      {
        extendDefaultReplacements: false,
        replacements: {
          dest: {
            destination: true,
          },
          dir: {
            direction: true,
            directory: true,
          },
          dirs: {
            directions: true,
            directories: true,
          },
          e: {
            error: true,
            event: true,
          },
          mod: {
            modification: true,
            module: true,
          },
          rel: {
            related: true,
            relationship: true,
            relative: true,
          },
          req: {
            request: true,
          },
          res: {
            response: true,
            result: true,
          },
          ret: {
            returnValue: true,
          },
          retVal: {
            returnValue: true,
          },
          sep: {
            separator: true,
          },
          stdDev: {
            standardDeviation: true,
          },
          tbl: {
            table: true,
          },
          tit: {
            title: true,
          },
        },
      },
    ],
    'no-undef': 'off',
    '@typescript-eslint/no-unused-vars': 'warn',
    'no-unused-vars': 'off',
    'import/extensions': [
      'error',
      'always',
      {
        mjs: 'never',
        js: 'never',
        jsx: 'never',
        mts: 'never',
        ts: 'never',
        tsx: 'never',
      },
    ],
    'vue/multi-word-component-names': 'off',
    'vue/order-in-components': [
      'warn',
      {
        order: [
          'el',
          'name',
          'key',
          'parent',
          'functional',
          ['delimiters', 'comments'],
          ['components', 'directives', 'filters'],
          'extends',
          'mixins',
          ['provide', 'inject'],
          'ROUTER_GUARDS',
          'layout',
          'middleware',
          'validate',
          'scrollToTop',
          'transition',
          'loading',
          'inheritAttrs',
          'model',
          ['props', 'propsData'],
          'emits',
          'setup',
          'asyncData',
          'data',
          'fetch',
          'head',
          'computed',
          'watch',
          'watchQuery',
          'LIFECYCLE_HOOKS',
          'onLaunch',
          'onLoad',
          'onShow',
          'onReady',
          'onHide',
          'onUnload',
          'onError',
          'onUniNViewMessage',
          'onUnhandledRejection',
          'onPageNotFound',
          'onThemeChange',
          'onResize',
          'onPullDownRefresh',
          'onReachBottom',
          'onTabItemTap',
          'onShareAppMessage',
          'onPageScroll',
          'onNavigationBarButtonTap',
          'onBackPress',
          'onNavigationBarSearchInputChanged',
          'onNavigationBarSearchInputConfirmed',
          'onNavigationBarSearchInputClicked',
          'onShareTimeline',
          'onAddToFavorites',
          'methods',
          ['template', 'render'],
          'renderError',
        ],
      },
    ],
    'vuejs-accessibility/click-events-have-key-events': 'off',
    'vuejs-accessibility/media-has-caption': 'off',
    '@typescript-eslint/explicit-function-return-type': 'off',
    'prettier/prettier': 'warn',
    'arrow-body-style': [
      'error',
      'as-needed',
      {
        requireReturnForObjectLiteral: false,
      },
    ],
    'prefer-arrow-callback': [
      'error',
      {
        allowNamedFunctions: false,
        allowUnboundThis: true,
      },
    ],
  },
  overrides: [
    {
      files: ['shims-jsx.d.ts', 'shims-tsx.d.ts'],
      rules: {
        '@typescript-eslint/no-empty-interface': 'off',
        '@typescript-eslint/no-explicit-any': 'off',
        '@typescript-eslint/no-unused-vars': 'off',
      },
    },
  ],
  settings: {
    'import/extensions': ['.mjs', '.js', '.jsx', '.mts', '.ts', '.tsx'],
    'import/resolver': {
      node: {},
      webpack: {},
      typescript: {},
    },
  },
};
